{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { BehaviorSubject } from 'rxjs';\n\nconst withObservableStream = (observable, triggers, initialState) => Component => {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = _objectSpread({}, initialState);\n    }\n\n    componentDidMount() {\n      this.subscription = observable.subscribe(newState => this.setState(_objectSpread({}, newState)));\n    }\n\n    componentWillUnmount() {\n      this.subscription.unsubscribe();\n    }\n\n    render() {\n      console.log(this.props);\n      return __jsx(Component, _extends({}, this.props, this.state, triggers));\n    }\n\n  };\n};\n\nconst SUBJECT = {\n  POPULARITY: \"키워드검색\",\n  DATE: \"날짜검색\"\n};\n\nconst App = ({\n  query = '',\n  subject,\n  onChangeQuery,\n  onSelectSubject\n}) => {\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"React \\uB7FD\\uB7FD\\uB7FD Rxjs\"), __jsx(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: event => onChangeQuery(event.target.value)\n  }), __jsx(\"div\", null, _Object$values(SUBJECT).map(value => __jsx(\"button\", {\n    key: value,\n    onClick: () => onSelectSubject(value),\n    type: \"button\"\n  }, value))), __jsx(\"p\", null, `쿼리에 담긴 값은 ${query}`));\n};\n\nconst query$ = new BehaviorSubject({\n  query: 'react'\n});\nexport default withObservableStream(query$, {\n  onChangeQuery: value => query$.next({\n    query: value\n  })\n}, {\n  query: '라라라라'\n})(App);","map":{"version":3,"sources":["/Users/kimserver/GitHub/TraB/RxJs/RxJs_Next_js/component/App.js"],"names":["React","BehaviorSubject","withObservableStream","observable","triggers","initialState","Component","constructor","props","state","componentDidMount","subscription","subscribe","newState","setState","componentWillUnmount","unsubscribe","render","console","log","SUBJECT","POPULARITY","DATE","App","query","subject","onChangeQuery","onSelectSubject","event","target","value","map","query$","next"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,QAA4B,MAA5B;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,KAAsCC,SAAS,IAAE;AAC1E,SAAO,cAAcN,KAAK,CAACM,SAApB,CAA6B;AAChCC,IAAAA,WAAW,CAACC,KAAD,EAAO;AACd,YAAMA,KAAN;AACA,WAAKC,KAAL,qBACOJ,YADP;AAGH;;AACDK,IAAAA,iBAAiB,GAAE;AACf,WAAKC,YAAL,GAAoBR,UAAU,CAACS,SAAX,CAAqBC,QAAQ,IAC7C,KAAKC,QAAL,mBAAkBD,QAAlB,EADgB,CAApB;AAGH;;AACDE,IAAAA,oBAAoB,GAAE;AAClB,WAAKJ,YAAL,CAAkBK,WAAlB;AACH;;AACDC,IAAAA,MAAM,GAAE;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAjB;AACA,aACI,MAAC,SAAD,eAAe,KAAKA,KAApB,EAA+B,KAAKC,KAApC,EAA+CL,QAA/C,EADJ;AAGH;;AApB+B,GAApC;AAsBH,CAvBD;;AAwBA,MAAMgB,OAAO,GAAG;AACZC,EAAAA,UAAU,EAAG,OADD;AAEZC,EAAAA,IAAI,EAAG;AAFK,CAAhB;;AAIA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA,KAAK,GAAE,EAAR;AAAWC,EAAAA,OAAX;AAAmBC,EAAAA,aAAnB;AAAkCC,EAAAA;AAAlC,CAAD,KAAsD;AAC9D,SACI,mBAEI,kDAFJ,EAGI;AAAO,IAAA,IAAI,EAAG,MAAd;AACI,IAAA,KAAK,EAAIH,KADb;AAEI,IAAA,QAAQ,EAAII,KAAK,IAAIF,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd;AAFtC,IAHJ,EAMI,mBACK,eAAcV,OAAd,EAAuBW,GAAvB,CAA2BD,KAAK,IAC7B;AAAQ,IAAA,GAAG,EAAIA,KAAf;AACI,IAAA,OAAO,EAAI,MAAKH,eAAe,CAACG,KAAD,CADnC;AAEI,IAAA,IAAI,EAAG;AAFX,KAEqBA,KAFrB,CADH,CADL,CANJ,EAcI,iBAAK,aAAYN,KAAM,EAAvB,CAdJ,CADJ;AAkBH,CAnBD;;AAoBA,MAAMQ,MAAM,GAAG,IAAI/B,eAAJ,CAAoB;AAACuB,EAAAA,KAAK,EAAC;AAAP,CAApB,CAAf;AAEA,eAAetB,oBAAoB,CAC/B8B,MAD+B,EACxB;AACPN,EAAAA,aAAa,EAAGI,KAAK,IAAIE,MAAM,CAACC,IAAP,CAAY;AAACT,IAAAA,KAAK,EAACM;AAAP,GAAZ;AADlB,CADwB,EAGjC;AACEN,EAAAA,KAAK,EAAG;AADV,CAHiC,CAApB,CAMdD,GANc,CAAf","sourcesContent":["import React from 'react'\nimport {BehaviorSubject}from'rxjs'\n\nconst withObservableStream = (observable, triggers, initialState)=>Component=>{\n    return class extends React.Component{\n        constructor(props){\n            super(props);\n            this.state = {\n                ...initialState\n            }\n        }\n        componentDidMount(){\n            this.subscription = observable.subscribe(newState=>\n                this.setState({...newState}),\n                );\n        }\n        componentWillUnmount(){\n            this.subscription.unsubscribe();\n        }\n        render(){\n            console.log(this.props)\n            return(\n                <Component {...this.props} {...this.state} {...triggers}/>\n            )\n        }\n    }\n}\nconst SUBJECT = {\n    POPULARITY : \"키워드검색\",\n    DATE : \"날짜검색\"\n}\nconst App = ({query ='',subject,onChangeQuery, onSelectSubject})=>{\n    return(\n        <div>\n            \n            <h1>React 럽럽럽 Rxjs</h1>\n            <input type = \"text\"\n                value = {query}\n                onChange = {event => onChangeQuery(event.target.value)}/>\n            <div>\n                {Object.values(SUBJECT).map(value =>(\n                    <button key = {value}\n                        onClick = {()=> onSelectSubject(value)}\n                        type = \"button\">{value}</button>\n                ))}\n            </div>\n            \n            <p>{`쿼리에 담긴 값은 ${query}`}</p>\n        </div>\n    )\n}\nconst query$ = new BehaviorSubject({query:'react'});\n\nexport default withObservableStream(\n    query$,{\n    onChangeQuery : value => query$.next({query:value})\n},{\n    query : '라라라라',\n})\n(App);"]},"metadata":{},"sourceType":"module"}