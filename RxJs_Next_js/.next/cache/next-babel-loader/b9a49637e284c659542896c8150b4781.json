{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { BehaviorSubject } from 'rxjs';\n\nvar withObservableStream = function withObservableStream(observable, triggers, initialState) {\n  return function (Component) {\n    return (\n      /*#__PURE__*/\n      function (_React$Component) {\n        _inherits(_class, _React$Component);\n\n        function _class(props) {\n          var _this;\n\n          _classCallCheck(this, _class);\n\n          _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));\n          _this.state = _objectSpread({}, initialState);\n          return _this;\n        }\n\n        _createClass(_class, [{\n          key: \"componentDidMount\",\n          value: function componentDidMount() {\n            var _this2 = this;\n\n            this.subscription = observable.subscribe(function (newState) {\n              return _this2.setState(_objectSpread({}, newState));\n            });\n          }\n        }, {\n          key: \"componentWillUnmount\",\n          value: function componentWillUnmount() {\n            this.subscription.unsubscribe();\n          }\n        }, {\n          key: \"render\",\n          value: function render() {\n            return __jsx(Component, _extends({}, this.props, this.state, triggers));\n          }\n        }]);\n\n        return _class;\n      }(React.Component)\n    );\n  };\n};\n\nvar SUBJECT = {\n  POPULARITY: \"search\",\n  DATE: \"serach_by_date\"\n};\n\nvar App = function App(_ref) {\n  var _ref$query = _ref.query,\n      query = _ref$query === void 0 ? '' : _ref$query,\n      subject = _ref.subject,\n      onChangeQuery = _ref.onChangeQuery,\n      onSelectSubject = _ref.onSelectSubject;\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"React \\uB7FD\\uB7FD\\uB7FD Rxjs\"), __jsx(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: function onChange(event) {\n      return onChangeQuery(event.target.value);\n    }\n  }), __jsx(\"div\", null, _Object$values(SUBJECT).map(function (value) {\n    return __jsx(\"button\", {\n      key: value,\n      onClick: function onClick() {\n        return onSelectSubject(value);\n      },\n      type: \"button\"\n    }, value);\n  })), __jsx(\"p\", null, \"\\uCFFC\\uB9AC\\uC5D0 \\uB2F4\\uAE34 \\uAC12\\uC740 \".concat(subject)));\n};\n\nvar query$ = new BehaviorSubject({\n  query: 'react'\n});\nexport default withObservableStream(query$, {\n  onChangeQuery: function onChangeQuery(value) {\n    return query$.next({\n      query: value\n    });\n  }\n}, {\n  query: ''\n})(App);","map":{"version":3,"sources":["/Users/kimserver/GitHub/TraB/RxJs/RxJs_Next_js/component/App.js"],"names":["React","BehaviorSubject","withObservableStream","observable","triggers","initialState","Component","props","state","subscription","subscribe","newState","setState","unsubscribe","SUBJECT","POPULARITY","DATE","App","query","subject","onChangeQuery","onSelectSubject","event","target","value","map","query$","next"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,QAA4B,MAA5B;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,UAAD,EAAaC,QAAb,EAAuBC,YAAvB;AAAA,SAAsC,UAAAC,SAAS,EAAE;AAC1E;AAAA;AAAA;AAAA;;AACI,wBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,sFAAMA,KAAN;AACA,gBAAKC,KAAL,qBACOH,YADP;AAFc;AAKjB;;AANL;AAAA;AAAA,8CAOuB;AAAA;;AACf,iBAAKI,YAAL,GAAoBN,UAAU,CAACO,SAAX,CAAqB,UAAAC,QAAQ;AAAA,qBAC7C,MAAI,CAACC,QAAL,mBAAkBD,QAAlB,EAD6C;AAAA,aAA7B,CAApB;AAGH;AAXL;AAAA;AAAA,iDAY0B;AAClB,iBAAKF,YAAL,CAAkBI,WAAlB;AACH;AAdL;AAAA;AAAA,mCAeY;AACJ,mBACI,MAAC,SAAD,eAAe,KAAKN,KAApB,EAA+B,KAAKC,KAApC,EAA+CJ,QAA/C,EADJ;AAGH;AAnBL;;AAAA;AAAA,QAAqBJ,KAAK,CAACM,SAA3B;AAAA;AAqBH,GAtB4B;AAAA,CAA7B;;AAuBA,IAAMQ,OAAO,GAAG;AACZC,EAAAA,UAAU,EAAG,QADD;AAEZC,EAAAA,IAAI,EAAG;AAFK,CAAhB;;AAIA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAAsD;AAAA,wBAApDC,KAAoD;AAAA,MAApDA,KAAoD,2BAA7C,EAA6C;AAAA,MAA1CC,OAA0C,QAA1CA,OAA0C;AAAA,MAAlCC,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,eAAmB,QAAnBA,eAAmB;AAC9D,SACI,mBAEI,kDAFJ,EAGI;AAAO,IAAA,IAAI,EAAG,MAAd;AACI,IAAA,KAAK,EAAIH,KADb;AAEI,IAAA,QAAQ,EAAI,kBAAAI,KAAK;AAAA,aAAIF,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAjB;AAAA;AAFrB,IAHJ,EAMI,mBACK,eAAcV,OAAd,EAAuBW,GAAvB,CAA2B,UAAAD,KAAK;AAAA,WAC7B;AAAQ,MAAA,GAAG,EAAIA,KAAf;AACI,MAAA,OAAO,EAAI;AAAA,eAAKH,eAAe,CAACG,KAAD,CAApB;AAAA,OADf;AAEI,MAAA,IAAI,EAAG;AAFX,OAEqBA,KAFrB,CAD6B;AAAA,GAAhC,CADL,CANJ,EAcI,wEAAiBL,OAAjB,EAdJ,CADJ;AAkBH,CAnBD;;AAoBA,IAAMO,MAAM,GAAG,IAAIzB,eAAJ,CAAoB;AAACiB,EAAAA,KAAK,EAAC;AAAP,CAApB,CAAf;AAEA,eAAehB,oBAAoB,CAC/BwB,MAD+B,EACxB;AACPN,EAAAA,aAAa,EAAG,uBAAAI,KAAK;AAAA,WAAIE,MAAM,CAACC,IAAP,CAAY;AAACT,MAAAA,KAAK,EAACM;AAAP,KAAZ,CAAJ;AAAA;AADd,CADwB,EAGjC;AACEN,EAAAA,KAAK,EAAG;AADV,CAHiC,CAApB,CAMdD,GANc,CAAf","sourcesContent":["import React from 'react'\nimport {BehaviorSubject}from'rxjs'\n\nconst withObservableStream = (observable, triggers, initialState)=>Component=>{\n    return class extends React.Component{\n        constructor(props){\n            super(props);\n            this.state = {\n                ...initialState\n            }\n        }\n        componentDidMount(){\n            this.subscription = observable.subscribe(newState=>\n                this.setState({...newState}),\n                );\n        }\n        componentWillUnmount(){\n            this.subscription.unsubscribe();\n        }\n        render(){\n            return(\n                <Component {...this.props} {...this.state} {...triggers}/>\n            )\n        }\n    }\n}\nconst SUBJECT = {\n    POPULARITY : \"search\",\n    DATE : \"serach_by_date\"\n}\nconst App = ({query ='',subject,onChangeQuery, onSelectSubject})=>{\n    return(\n        <div>\n            \n            <h1>React 럽럽럽 Rxjs</h1>\n            <input type = \"text\"\n                value = {query}\n                onChange = {event => onChangeQuery(event.target.value)}/>\n            <div>\n                {Object.values(SUBJECT).map(value =>(\n                    <button key = {value}\n                        onClick = {()=> onSelectSubject(value)}\n                        type = \"button\">{value}</button>\n                ))}\n            </div>\n            \n            <p>{`쿼리에 담긴 값은 ${subject}`}</p>\n        </div>\n    )\n}\nconst query$ = new BehaviorSubject({query:'react'});\n\nexport default withObservableStream(\n    query$,{\n    onChangeQuery : value => query$.next({query:value})\n},{\n    query : '',\n})\n(App);"]},"metadata":{},"sourceType":"module"}