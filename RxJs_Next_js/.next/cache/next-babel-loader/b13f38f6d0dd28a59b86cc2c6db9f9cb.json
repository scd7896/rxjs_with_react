{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userLogin),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUserLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, takeEvery, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOGIN_USER_REQUEST, LOGIN_USER_FAILURE, LOGIN_USER_SUCCESS } from '../action';\nimport axios from 'axios';\n\nvar userLoginApi =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(action) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //const res = await axios(\"로그인 api\", {id : action.id, password : action.password})\n            res = {\n              data: {\n                cookie: 'abcdefg',\n                name: \"대단한 사람\",\n                position: \"운영자... 등등\"\n              }\n            };\n            document.cookie = \"thisusertoken=\".concat(res.data.cookie);\n            return _context.abrupt(\"return\", res.data);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function userLoginApi(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction userLogin(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function userLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(userLoginApi, action);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOGIN_USER_SUCCESS,\n            cookie: result.cookie,\n            name: result.name,\n            position: result.position\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            tpye: LOGIN_USER_FAILURE,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchUserLogin() {\n  return _regeneratorRuntime.wrap(function watchUserLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return throttle(3000, LOGIN_USER_REQUEST, userLogin);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchUserLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/kimserver/GitHub/TraB/RxJs/RxJs_Next_js/saga/user.js"],"names":["userLogin","watchUserLogin","userSaga","all","delay","fork","takeEvery","takeLatest","call","put","take","LOGIN_USER_REQUEST","LOGIN_USER_FAILURE","LOGIN_USER_SUCCESS","axios","userLoginApi","action","res","data","cookie","name","position","document","result","type","tpye","error","throttle"],"mappings":";;;;;yBAeWA,S;;;yBAiBAC,c;;;yBAGcC,Q;;AAnCzB,SAAQC,GAAR,EAAaC,KAAb,EAAmBC,IAAnB,EAAyBC,SAAzB,EAAmCC,UAAnC,EAA+CC,IAA/C,EAAoDC,GAApD,EAAwDC,IAAxD,QAAmE,oBAAnE;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,QAA2E,WAA3E;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,IAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAE,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;AACMC,YAAAA,GAFU,GAEJ;AACRC,cAAAA,IAAI,EAAG;AACHC,gBAAAA,MAAM,EAAG,SADN;AAEHC,gBAAAA,IAAI,EAAG,QAFJ;AAGHC,gBAAAA,QAAQ,EAAG;AAHR;AADC,aAFI;AAShBC,YAAAA,QAAQ,CAACH,MAAT,2BAAmCF,GAAG,CAACC,IAAJ,CAASC,MAA5C;AATgB,6CAUTF,GAAG,CAACC,IAVK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAF;;AAAA,kBAAZH,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAYA,SAAWf,SAAX,CAAqBgB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMR,IAAI,CAACO,YAAD,EAAeC,MAAf,CAAV;;AAFvB;AAEcO,UAAAA,MAFd;AAAA;AAGQ,iBAAMd,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAGX,kBADD;AAENM,YAAAA,MAAM,EAAGI,MAAM,CAACJ,MAFV;AAGNC,YAAAA,IAAI,EAAGG,MAAM,CAACH,IAHR;AAINC,YAAAA,QAAQ,EAAGE,MAAM,CAACF;AAJZ,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMZ,GAAG,CAAC;AACNgB,YAAAA,IAAI,EAAGb,kBADD;AAENc,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAWzB,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,iBAAM0B,QAAQ,CAAC,IAAD,EAAMhB,kBAAN,EAAyBX,SAAzB,CAAd;;AADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACJ,cAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, delay,fork, takeEvery,takeLatest, call,put,take} from 'redux-saga/effects'\nimport { LOGIN_USER_REQUEST, LOGIN_USER_FAILURE, LOGIN_USER_SUCCESS } from '../action'\nimport axios from 'axios'\nconst userLoginApi= async(action)=>{\n    //const res = await axios(\"로그인 api\", {id : action.id, password : action.password})\n    const res = {\n        data : {\n            cookie : 'abcdefg',\n            name : \"대단한 사람\",\n            position : \"운영자... 등등\"\n        }\n    }\n    document.cookie = `thisusertoken=${res.data.cookie}`\n    return res.data\n}\nfunction * userLogin(action){\n    try{\n        const result = yield call(userLoginApi, action)\n        yield put({\n            type : LOGIN_USER_SUCCESS,\n            cookie : result.cookie,\n            name : result.name,\n            position : result.position\n        })\n    }catch(err){\n        yield put({\n            tpye : LOGIN_USER_FAILURE,\n            error : err\n        })\n    }\n}\n\nfunction * watchUserLogin(){\n        yield throttle(3000,LOGIN_USER_REQUEST,userLogin )\n}\nexport default function* userSaga(){\n    yield all([\n        fork(watchUserLogin)\n\n    ])\n}"]},"metadata":{},"sourceType":"module"}