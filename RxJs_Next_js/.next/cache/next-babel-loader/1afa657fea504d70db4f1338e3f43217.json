{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Subject, from, interval, fromEvent, of } from 'rxjs';\nimport { multicast, flatMap, map, refCount } from 'rxjs/operators';\nimport { makePublicRouterInstance } from 'next/dist/client/router';\nimport Test from '../component/Test';\n\nvar index = function index() {\n  var _useState = useState([1, 2, 3, 4, 5]),\n      arr = _useState[0],\n      setArr = _useState[1];\n\n  var firstExample = function firstExample() {\n    var subject = new Subject();\n    subject.subscribe({\n      next: function next(v) {\n        return console.log(\"observer A \".concat(v));\n      }\n    });\n    subject.subscribe({\n      next: function next(v) {\n        return console.log(\"observer B \".concat(v));\n      }\n    });\n    var observable = from([1, 2, 3]);\n    observable.subscribe(subject);\n  };\n\n  var secondExample = function secondExample() {\n    var source = interval(500);\n    var subject = new Subject();\n    var multicasted = source.pipe(multicast(subject));\n    var subscription1, subscription2, subscriptionConnect;\n    subscription1 = multicasted.subscribe({\n      next: function next(v) {\n        return console.log(\"observarA : \".concat(v));\n      },\n      complete: function complete() {\n        return console.log(\"구독종료\");\n      }\n    });\n    subscriptionConnect = multicasted.connect();\n    setTimeout(function () {\n      subscription2 = multicasted.subscribe({\n        next: function next(v) {\n          return console.log(\"observerB : \".concat(v));\n        }\n      });\n    }, 600);\n    setTimeout(function () {\n      subscription1.unsubscribe();\n    }, 1200);\n    setTimeout(function () {\n      subscription2.unsubscribe();\n      subscriptionConnect.unsubscribe();\n    }, 2000);\n  };\n\n  var thirdClick = function thirdClick() {\n    //refCount는 현재 subject에 구독중인 옵저버 숫자를 파악한다.\n    var source = interval(500);\n    var subject = new Subject();\n    var refCounted = source.pipe(multicast(subject), refCount());\n    var subscription1, subscription2;\n    console.log('observer A 구독시작');\n    subscription1 = refCounted.subscribe({\n      next: function next(v) {\n        return console.log(\"observer A \\uCE74\\uC6B4\\uD305 : \".concat(v));\n      }\n    });\n    setTimeout(function () {\n      console.log('observerB 구독시작');\n      subscription2 = refCounted.subscribe({\n        next: function next(v) {\n          return console.log(\"observer B \\uCE74\\uC6B4\\uD305 : \".concat(v));\n        }\n      });\n    }, 600);\n    setTimeout(function () {\n      console.log('observerA 구독 종료');\n      subscription1.unsubscribe();\n    }, 2000);\n    setTimeout(function () {\n      console.log('observerB 구독 종료 ');\n      subscription2.unsubscribe();\n    }, 3000);\n  };\n\n  var mouseOddEvent = function mouseOddEvent(event) {\n    if (event.clientX % 2 !== 0) {\n      console.log(\"홀수\");\n    } else {\n      console.log(\"짝수\");\n    }\n  };\n\n  useEffect(function () {// const mouse = fromEvent(window, 'mousemove').pipe(\n    //     map(el => el)\n    // )\n    // mouse.subscribe({\n    //     next : (v)=> mouseOddEvent(v),\n    //     error : (err)=>console.error(err)\n    // })\n  }, []);\n\n  var mapTest = function mapTest() {\n    var observable = of(arr);\n    observable.subscribe({\n      next: function next(el) {\n        return __jsx(Test, {\n          el: el\n        });\n      }\n    });\n  };\n\n  var addArr = function addArr() {\n    setArr([].concat(_toConsumableArray(arr), [6]));\n  };\n\n  return __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: firstExample\n  }, \"\\uCC98\\uC74C \\uC608\\uC81C\"), __jsx(\"button\", {\n    onClick: secondExample\n  }, \"\\uB450\\uBC88\\uC9F8 \\uC608\\uC81C\"), __jsx(\"button\", {\n    onClick: thirdClick\n  }, \"\\uC138\\uBC88\\uC9F8 \\uC608\\uC81C\"), mapTest(), __jsx(\"button\", {\n    onClick: addArr\n  }, \"\\uBC30\\uC5F4\\uB298\\uB824\\uBC84\\uB9AC\\uAE30\"), __jsx(Test, {\n    el: 3\n  }));\n};\n\nindex.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(context.store);\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default index;","map":{"version":3,"sources":["/Users/kimserver/GitHub/TraB/RxJs/RxJs_Next_js/pages/index.js"],"names":["React","useEffect","useState","Subject","from","interval","fromEvent","of","multicast","flatMap","map","refCount","makePublicRouterInstance","Test","index","arr","setArr","firstExample","subject","subscribe","next","v","console","log","observable","secondExample","source","multicasted","pipe","subscription1","subscription2","subscriptionConnect","complete","connect","setTimeout","unsubscribe","thirdClick","refCounted","mouseOddEvent","event","clientX","mapTest","el","addArr","getInitialProps","context","store"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport {Subject, from,interval,fromEvent, of} from 'rxjs'\nimport {multicast, flatMap, map, refCount} from 'rxjs/operators'\nimport { makePublicRouterInstance } from 'next/dist/client/router'\n\nimport Test from '../component/Test'\nconst index = ()=>{\n    const [arr, setArr] = useState([1,2,3,4,5])\n    const firstExample = ()=>{\n        const subject = new Subject()\n        subject.subscribe({\n            next : (v)=> console.log(`observer A ${v}`)\n        })\n        subject.subscribe({\n            next : (v)=> console.log(`observer B ${v}`)\n        })\n        const observable = from([1,2,3])\n        observable.subscribe(subject)\n    }\n    const secondExample = ()=>{\n        const source = interval(500)\n        const subject = new Subject();\n        const multicasted = source.pipe(multicast(subject))\n        let subscription1, subscription2, subscriptionConnect;\n\n        subscription1 = multicasted.subscribe({\n            next : (v)=> console.log(`observarA : ${v}`),\n            complete : ()=> console.log(\"구독종료\"),\n            \n        })\n        subscriptionConnect = multicasted.connect();\n        setTimeout(()=>{\n            subscription2 = multicasted.subscribe({\n                next : (v)=> console.log(`observerB : ${v}`)\n            })\n        },600)\n        setTimeout(()=>{\n            subscription1.unsubscribe()\n        },1200)\n        setTimeout(()=>{\n            subscription2.unsubscribe();\n            subscriptionConnect.unsubscribe();\n        },2000 )\n    }\n    const thirdClick = ()=>{\n        //refCount는 현재 subject에 구독중인 옵저버 숫자를 파악한다.\n        const source = interval(500)\n        const subject= new Subject();\n        const refCounted = source.pipe(multicast(subject), refCount())\n        let subscription1, subscription2;\n\n        console.log('observer A 구독시작');\n        subscription1 = refCounted.subscribe({\n            next : (v)=> console.log(`observer A 카운팅 : ${v}`)\n        })\n        setTimeout(()=>{\n            console.log('observerB 구독시작')\n            subscription2 = refCounted.subscribe({\n                next : (v)=> console.log(`observer B 카운팅 : ${v}`)\n            })\n        }, 600)\n        setTimeout(()=>{\n            console.log('observerA 구독 종료')\n            subscription1.unsubscribe()\n        }, 2000)\n        setTimeout(()=>{\n            console.log('observerB 구독 종료 ')\n            subscription2.unsubscribe()\n        }, 3000)\n    }\n    const mouseOddEvent = (event)=>{\n        if(event.clientX%2!==0){\n            console.log(\"홀수\")\n        }else{\n            console.log(\"짝수\")\n        }\n    }\n    \n    useEffect(()=>{\n        // const mouse = fromEvent(window, 'mousemove').pipe(\n        //     map(el => el)\n        // )\n        // mouse.subscribe({\n        //     next : (v)=> mouseOddEvent(v),\n        //     error : (err)=>console.error(err)\n        // })\n    },[])\n    \n    \n    const mapTest = ()=>{\n        const observable = of(arr)\n        observable.subscribe({\n            next : (el) => <Test el = {el}/>\n        })\n    }\n    const addArr = ()=>{\n        setArr([...arr, 6])\n    }\n    return(\n        <div>\n            <button onClick = {firstExample}>처음 예제</button>\n            <button onClick = {secondExample}>두번째 예제</button>\n            <button onClick = {thirdClick}>세번째 예제</button>\n            {\n                mapTest()\n            }\n\n            <button onClick = {addArr}>배열늘려버리기</button>\n            <Test el = {3}/>\n        </div>\n    )\n}\n\nindex.getInitialProps = async(context)=>{\n    console.log(context.store)\n    return {}\n}\n\nexport default index;"]},"metadata":{},"sourceType":"module"}