{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { Subject, from, interval, fromEvent, of } from 'rxjs';\nimport { multicast, flatMap, map, refCount } from 'rxjs/operators';\nimport { makePublicRouterInstance } from 'next/dist/client/router';\nimport Test from '../component/Test';\n\nconst index = () => {\n  const firstExample = () => {\n    const subject = new Subject();\n    subject.subscribe({\n      next: v => console.log(`observer A ${v}`)\n    });\n    subject.subscribe({\n      next: v => console.log(`observer B ${v}`)\n    });\n    const observable = from([1, 2, 3]);\n    observable.subscribe(subject);\n  };\n\n  const secondExample = () => {\n    const source = interval(500);\n    const subject = new Subject();\n    const multicasted = source.pipe(multicast(subject));\n    let subscription1, subscription2, subscriptionConnect;\n    subscription1 = multicasted.subscribe({\n      next: v => console.log(`observarA : ${v}`),\n      complete: () => console.log(\"구독종료\")\n    });\n    subscriptionConnect = multicasted.connect();\n    setTimeout(() => {\n      subscription2 = multicasted.subscribe({\n        next: v => console.log(`observerB : ${v}`)\n      });\n    }, 600);\n    setTimeout(() => {\n      subscription1.unsubscribe();\n    }, 1200);\n    setTimeout(() => {\n      subscription2.unsubscribe();\n      subscriptionConnect.unsubscribe();\n    }, 2000);\n  };\n\n  const thirdClick = () => {\n    //refCount는 현재 subject에 구독중인 옵저버 숫자를 파악한다.\n    const source = interval(500);\n    const subject = new Subject();\n    const refCounted = source.pipe(multicast(subject), refCount());\n    let subscription1, subscription2;\n    console.log('observer A 구독시작');\n    subscription1 = refCounted.subscribe({\n      next: v => console.log(`observer A 카운팅 : ${v}`)\n    });\n    setTimeout(() => {\n      console.log('observerB 구독시작');\n      subscription2 = refCounted.subscribe({\n        next: v => console.log(`observer B 카운팅 : ${v}`)\n      });\n    }, 600);\n    setTimeout(() => {\n      console.log('observerA 구독 종료');\n      subscription1.unsubscribe();\n    }, 2000);\n    setTimeout(() => {\n      console.log('observerB 구독 종료 ');\n      subscription2.unsubscribe();\n    }, 3000);\n  };\n\n  const mouseOddEvent = event => {\n    if (event.clientX % 2 !== 0) {\n      console.log(\"홀수\");\n    } else {\n      console.log(\"짝수\");\n    }\n  };\n\n  useEffect(() => {// const mouse = fromEvent(window, 'mousemove').pipe(\n    //     map(el => el)\n    // )\n    // mouse.subscribe({\n    //     next : (v)=> mouseOddEvent(v),\n    //     error : (err)=>console.error(err)\n    // })\n  }, []);\n  const arr = [1, 2, 3, 4, 5];\n\n  const mapTest = () => {\n    const observable = of(arr);\n    observable.subscribe(el => __jsx(Test, {\n      el: el\n    }));\n  };\n\n  return __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: firstExample\n  }, \"\\uCC98\\uC74C \\uC608\\uC81C\"), __jsx(\"button\", {\n    onClick: secondExample\n  }, \"\\uB450\\uBC88\\uC9F8 \\uC608\\uC81C\"), __jsx(\"button\", {\n    onClick: thirdClick\n  }, \"\\uC138\\uBC88\\uC9F8 \\uC608\\uC81C\"), mapTest());\n};\n\nindex.getInitialProps = async context => {\n  console.log(context.store);\n  return {};\n};\n\nexport default index;","map":{"version":3,"sources":["/Users/kimserver/GitHub/TraB/RxJs/RxJs_Next_js/pages/index.js"],"names":["React","useEffect","Subject","from","interval","fromEvent","of","multicast","flatMap","map","refCount","makePublicRouterInstance","Test","index","firstExample","subject","subscribe","next","v","console","log","observable","secondExample","source","multicasted","pipe","subscription1","subscription2","subscriptionConnect","complete","connect","setTimeout","unsubscribe","thirdClick","refCounted","mouseOddEvent","event","clientX","arr","mapTest","el","getInitialProps","context","store"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react'\nimport {Subject, from,interval,fromEvent, of} from 'rxjs'\nimport {multicast, flatMap, map, refCount} from 'rxjs/operators'\nimport { makePublicRouterInstance } from 'next/dist/client/router'\n\nimport Test from '../component/Test'\nconst index = ()=>{\n    const firstExample = ()=>{\n        const subject = new Subject()\n        subject.subscribe({\n            next : (v)=> console.log(`observer A ${v}`)\n        })\n        subject.subscribe({\n            next : (v)=> console.log(`observer B ${v}`)\n        })\n        const observable = from([1,2,3])\n        observable.subscribe(subject)\n    }\n    const secondExample = ()=>{\n        const source = interval(500)\n        const subject = new Subject();\n        const multicasted = source.pipe(multicast(subject))\n        let subscription1, subscription2, subscriptionConnect;\n\n        subscription1 = multicasted.subscribe({\n            next : (v)=> console.log(`observarA : ${v}`),\n            complete : ()=> console.log(\"구독종료\"),\n            \n        })\n        subscriptionConnect = multicasted.connect();\n        setTimeout(()=>{\n            subscription2 = multicasted.subscribe({\n                next : (v)=> console.log(`observerB : ${v}`)\n            })\n        },600)\n        setTimeout(()=>{\n            subscription1.unsubscribe()\n        },1200)\n        setTimeout(()=>{\n            subscription2.unsubscribe();\n            subscriptionConnect.unsubscribe();\n        },2000 )\n    }\n    const thirdClick = ()=>{\n        //refCount는 현재 subject에 구독중인 옵저버 숫자를 파악한다.\n        const source = interval(500)\n        const subject= new Subject();\n        const refCounted = source.pipe(multicast(subject), refCount())\n        let subscription1, subscription2;\n\n        console.log('observer A 구독시작');\n        subscription1 = refCounted.subscribe({\n            next : (v)=> console.log(`observer A 카운팅 : ${v}`)\n        })\n        setTimeout(()=>{\n            console.log('observerB 구독시작')\n            subscription2 = refCounted.subscribe({\n                next : (v)=> console.log(`observer B 카운팅 : ${v}`)\n            })\n        }, 600)\n        setTimeout(()=>{\n            console.log('observerA 구독 종료')\n            subscription1.unsubscribe()\n        }, 2000)\n        setTimeout(()=>{\n            console.log('observerB 구독 종료 ')\n            subscription2.unsubscribe()\n        }, 3000)\n    }\n    const mouseOddEvent = (event)=>{\n        if(event.clientX%2!==0){\n            console.log(\"홀수\")\n        }else{\n            console.log(\"짝수\")\n        }\n    }\n    \n    useEffect(()=>{\n        // const mouse = fromEvent(window, 'mousemove').pipe(\n        //     map(el => el)\n        // )\n        // mouse.subscribe({\n        //     next : (v)=> mouseOddEvent(v),\n        //     error : (err)=>console.error(err)\n        // })\n    },[])\n    const arr = [1,2,3,4,5]\n    \n    const mapTest = ()=>{\n        const observable = of(arr)\n        observable.subscribe((el)=> <Test el = {el} />)\n    }\n    return(\n        <div>\n            <button onClick = {firstExample}>처음 예제</button>\n            <button onClick = {secondExample}>두번째 예제</button>\n            <button onClick = {thirdClick}>세번째 예제</button>\n            {\n                mapTest()\n            }\n        </div>\n    )\n}\n\nindex.getInitialProps = async(context)=>{\n    console.log(context.store)\n    return {}\n}\n\nexport default index;"]},"metadata":{},"sourceType":"module"}